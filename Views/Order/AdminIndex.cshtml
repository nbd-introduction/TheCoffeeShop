@model List<TheCoffeeShop.Models.Order>
@{
    ViewData["Title"] = "Quản lý đơn hàng";
   
}

<div class="admin-container">
    <div class="admin-sidebar">
        <div class="sidebar-header">
            <img src="/Content/Images/logo.png" alt="The Coffee Shop" class="logo">
            <h2>The Coffee Shop</h2>
        </div>
        <nav class="sidebar-nav">
            <ul>
                <li><a href="/Admin/Dashboard"><i class="fas fa-tachometer-alt"></i> Tổng quan</a></li>
                <li class="active"><a href="/Order/AdminIndex"><i class="fas fa-shopping-cart"></i> Quản lý đơn hàng</a></li>
                <li><a href="/Product/AdminIndex"><i class="fas fa-coffee"></i> Sản phẩm</a></li>
                <li><a href="/Category/AdminIndex"><i class="fas fa-tags"></i> Danh mục</a></li>
                <li><a href="/Admin/Users"><i class="fas fa-users"></i> Khách hàng</a></li>
                <li><a href="/Admin/Reports"><i class="fas fa-chart-bar"></i> Báo cáo</a></li>
                
            </ul>
        </nav>
    </div>

    <div class="admin-content">
        <div class="admin-header">
            <div class="header-search">
                <i class="fas fa-search"></i>
                <input type="text" id="searchInput" placeholder="Tìm kiếm đơn hàng, khách hàng...">
            </div>
            <div class="header-actions">
                <div class="notification">
                    <i class="fas fa-bell"></i>
                    <span class="badge">3</span>
                </div>
                <div class="admin-profile">
                    <img src="/Content/Images/admin-avatar.jpg" alt="Admin" class="avatar">
                    <div class="admin-info">
                        <span class="admin-name">Admin</span>
                        <span class="admin-role">Quản trị viên</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="admin-dashboard">
            <div class="dashboard-header">
                <h1>Quản lý đơn hàng</h1>
                <div class="dashboard-actions">
                    <button class="btn-export"><i class="fas fa-file-export"></i> Xuất báo cáo</button>
                    <button class="btn-refresh"><i class="fas fa-sync-alt"></i> Làm mới</button>
                </div>
            </div>

            <div class="dashboard-stats">
                <div class="stat-card">
                    <div class="stat-icon" style="background-color: rgba(76, 175, 80, 0.1);">
                        <i class="fas fa-shopping-cart" style="color: #4CAF50;"></i>
                    </div>
                    <div class="stat-info">
                        <h3>Tổng đơn hàng</h3>
                        <p>@ViewBag.TotalOrders</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon" style="background-color: rgba(33, 150, 243, 0.1);">
                        <i class="fas fa-spinner" style="color: #2196F3;"></i>
                    </div>
                    <div class="stat-info">
                        <h3>Đơn đang xử lý</h3>
                        <p>@ViewBag.ProcessingOrders</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon" style="background-color: rgba(76, 175, 80, 0.1);">
                        <i class="fas fa-check-circle" style="color: #4CAF50;"></i>
                    </div>
                    <div class="stat-info">
                        <h3>Đơn hoàn thành</h3>
                        <p>@ViewBag.CompletedOrders</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon" style="background-color: rgba(244, 67, 54, 0.1);">
                        <i class="fas fa-times-circle" style="color: #F44336;"></i>
                    </div>
                    <div class="stat-info">
                        <h3>Đơn đã hủy</h3>
                        <p>@ViewBag.CancelledOrders</p>
                    </div>
                </div>
            </div>

            <div class="filter-section">
                <div class="filter-group">
                    <select id="statusFilter" class="filter-select">
                        <option value="">Tất cả trạng thái</option>
                        <option value="pending">Chờ xác nhận</option>
                        <option value="processing">Đang xử lý</option>
                        <option value="shipping">Đang giao hàng</option>
                        <option value="completed">Đã hoàn thành</option>
                        <option value="cancelled">Đã hủy</option>
                    </select>
                    <select id="timeFilter" class="filter-select">
                        <option value="">Tất cả thời gian</option>
                        <option value="today">Hôm nay</option>
                        <option value="yesterday">Hôm qua</option>
                        <option value="week">7 ngày qua</option>
                        <option value="month">30 ngày qua</option>
                    </select>
                    <div class="date-range">
                        <input type="date" id="startDate" placeholder="Từ ngày">
                        <input type="date" id="endDate" placeholder="Đến ngày">
                    </div>
                </div>
                <button id="applyFilter" class="btn-filter"><i class="fas fa-filter"></i> Lọc</button>
            </div>

            <div class="order-tabs">
                <button class="tab-btn active" data-tab="all">Tất cả đơn hàng</button>
                <button class="tab-btn" data-tab="pending">Chờ xác nhận</button>
                <button class="tab-btn" data-tab="processing">Đang xử lý</button>
                <button class="tab-btn" data-tab="shipping">Đang giao hàng</button>
                <button class="tab-btn" data-tab="completed">Đã hoàn thành</button>
                <button class="tab-btn" data-tab="cancelled">Đã hủy</button>
            </div>

            <div class="orders-table-container">
                <table class="orders-table">
                    <thead>
                        <tr>
                            <th>Mã đơn hàng</th>
                            <th>Khách hàng</th>
                            <th>Ngày đặt</th>
                            <th>Sản phẩm</th>
                            <th>Tổng tiền</th>
                            <th>Trạng thái</th>
                            <th>Thao tác</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in Model)
                        {
                           
                            <tr data-status="Shipping">
                                <td class="order-id">
                                    <a href="#" class="view-order" data-order-id="@order.OrderId">TCS@(order.OrderId.ToString("D6"))</a>
                                </td>
                                <td class="customer-info">
                                    @if (order.Account != null)
                                    {
                                        <div class="customer-avatar">
                                            @if (!string.IsNullOrEmpty(order.Account.FullName))
                                            {
                                                <div class="avatar-placeholder">@order.Account.FullName.Substring(0, 1).ToUpper()</div>
                                            }
                                            else
                                            {
                                                <div class="avatar-placeholder">@order.Account.UserName.Substring(0, 1).ToUpper()</div>
                                            }
                                        </div>
                                        <div class="customer-details">
                                            <span class="customer-name">@(string.IsNullOrEmpty(order.Account.FullName) ? order.Account.UserName : order.Account.FullName)</span>
                                            <span class="customer-email">@order.Account.Email</span>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="customer-avatar">
                                            <div class="avatar-placeholder">?</div>
                                        </div>
                                        <div class="customer-details">
                                            <span class="customer-name">Khách vãng lai</span>
                                            <span class="customer-email">Không có thông tin</span>
                                        </div>
                                    }
                                </td>
                                <td>@(order.OrderDate.HasValue ? order.OrderDate.Value.ToString("dd/MM/yyyy HH:mm") : "N/A")</td>
                                <td class="product-info">
                                    @if (order.Cart != null && order.Cart.Product != null)
                                    {
                                        <div class="product-name">@order.Cart.Product.ProductName</div>
                                        <div class="product-quantity">SL: @order.Cart.Quality</div>
                                    }
                                    else
                                    {
                                        <span>Không có thông tin</span>
                                    }
                                </td>
                                <td class="order-amount">
                                    @if (order.Cart != null && order.Cart.TotalPrice.HasValue)
                                    {
                                        @string.Format("{0:#,##0} VNĐ", order.Cart.TotalPrice)
                                    }
                                    else
                                    {
                                        <span>N/A</span>
                                    }
                                </td>
                                <td>
                                    <p>Đã nhận đơn</p>
                                </td>
                                <td class="actions">
                                    <button class="btn-action view" data-order-id="@order.OrderId" title="Xem chi tiết">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn-action edit" data-order-id="@order.OrderId" title="Chỉnh sửa">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn-action print" data-order-id="@order.OrderId" title="In hóa đơn">
                                        <i class="fas fa-print"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="pagination">
                <span class="pagination-info">Hiển thị 1-@(Model.Count < 10 ? Model.Count : 10) của @Model.Count đơn hàng</span>
                <div class="pagination-controls">
                    <button class="pagination-btn" disabled><i class="fas fa-chevron-left"></i></button>
                    <div class="pagination-numbers">
                        <button class="pagination-number active">1</button>
                        @if (Model.Count > 10)
                        {
                            <button class="pagination-number">2</button>
                        }
                        @if (Model.Count > 20)
                        {
                            <button class="pagination-number">3</button>
                        }
                    </div>
                    <button class="pagination-btn" @(Model.Count <= 10 ? "disabled" : "")><i class="fas fa-chevron-right"></i></button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal Chi tiết đơn hàng -->
<div id="orderDetailModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Chi tiết đơn hàng <span id="modalOrderId"></span></h2>
            <button class="close-modal">&times;</button>
        </div>
        <div class="modal-body">
            <div class="order-info-grid">
                <div class="order-info-card">
                    <h3>Thông tin đơn hàng</h3>
                    <div class="info-row">
                        <span class="info-label">Mã đơn hàng:</span>
                        <span class="info-value" id="detailOrderId"></span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Ngày đặt hàng:</span>
                        <span class="info-value" id="detailOrderDate"></span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Trạng thái:</span>
                        <span class="info-value" id="detailOrderStatus"></span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Mã giỏ hàng:</span>
                        <span class="info-value" id="detailCartId"></span>
                    </div>
                </div>
                <div class="order-info-card">
                    <h3>Thông tin khách hàng</h3>
                    <div class="info-row">
                        <span class="info-label">Tên khách hàng:</span>
                        <span class="info-value" id="detailCustomerName"></span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Email:</span>
                        <span class="info-value" id="detailCustomerEmail"></span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Số điện thoại:</span>
                        <span class="info-value" id="detailCustomerPhone"></span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Địa chỉ:</span>
                        <span class="info-value" id="detailCustomerAddress"></span>
                    </div>
                </div>
            </div>

            <div class="order-items-section">
                <h3>Sản phẩm đã đặt</h3>
                <table class="order-items-table">
                    <thead>
                        <tr>
                            <th>Sản phẩm</th>
                            <th>Giá</th>
                            <th>Số lượng</th>
                            <th>Thành tiền</th>
                        </tr>
                    </thead>
                    <tbody id="orderItemsList">
                        <!-- Danh sách sản phẩm sẽ được thêm vào đây bằng JavaScript -->
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="3" class="text-right">Tạm tính:</td>
                            <td id="subtotal"></td>
                        </tr>
                        <tr>
                            <td colspan="3" class="text-right">Phí vận chuyển:</td>
                            <td id="shippingFee"></td>
                        </tr>
                        <tr class="total-row">
                            <td colspan="3" class="text-right">Tổng cộng:</td>
                            <td id="totalAmount"></td>
                        </tr>
                    </tfoot>
                </table>
            </div>

            <div class="order-timeline">
                <h3>Lịch sử đơn hàng</h3>
                <div class="timeline" id="orderTimeline">
                    <!-- Timeline sẽ được thêm vào đây bằng JavaScript -->
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <div class="status-update">
                <select id="updateStatusSelect" class="status-select">
                    <option value="">Cập nhật trạng thái</option>
                    <option value="pending">Chờ xác nhận</option>
                    <option value="processing">Đang xử lý</option>
                    <option value="shipping">Đang giao hàng</option>
                    <option value="completed">Đã hoàn thành</option>
                    <option value="cancelled">Đã hủy</option>
                </select>
                <button id="updateStatusBtn" class="btn-update">Cập nhật</button>
            </div>
            <div class="modal-actions">
                <button class="btn-print"><i class="fas fa-print"></i> In hóa đơn</button>
                <button class="btn-close">Đóng</button>
            </div>
        </div>
    </div>
</div>

<style>
    :root {
        --primary: #6b4226;
        --primary-light: #8c6242;
        --primary-dark: #4e301c;
        --secondary: #a67c52;
        --accent: #d4a762;
        --accent-light: #e9d2b3;
        --success: #4caf50;
        --warning: #ff9800;
        --danger: #f44336;
        --info: #2196f3;
        --dark: #333333;
        --light: #f5f5f5;
        --gray: #757575;
        --gray-light: #e0e0e0;
        --white: #ffffff;
        --shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        --border-radius: 8px;
        --transition: all 0.3s ease;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Poppins', sans-serif;
        background-color: #f5f5f5;
        color: var(--dark);
    }

    /* Admin Layout */
    .admin-container {
        display: flex;
        min-height: 100vh;
    }

    /* Sidebar */
    .admin-sidebar {
        width: 260px;
        background-color: var(--white);
        box-shadow: var(--shadow);
        position: fixed;
        height: 100vh;
        z-index: 100;
    }

    .sidebar-header {
        padding: 20px;
        display: flex;
        align-items: center;
        border-bottom: 1px solid var(--gray-light);
    }

    .logo {
        width: 40px;
        height: 40px;
        margin-right: 10px;
    }

    .sidebar-header h2 {
        font-size: 18px;
        color: var(--primary);
        font-weight: 600;
    }

    .sidebar-nav {
        padding: 20px 0;
    }

    .sidebar-nav ul {
        list-style: none;
    }

    .sidebar-nav li {
        margin-bottom: 5px;
    }

    .sidebar-nav a {
        display: flex;
        align-items: center;
        padding: 12px 20px;
        color: var(--dark);
        text-decoration: none;
        transition: var(--transition);
        font-size: 14px;
    }

    .sidebar-nav a i {
        margin-right: 10px;
        font-size: 18px;
        width: 20px;
        text-align: center;
    }

    .sidebar-nav a:hover {
        background-color: rgba(107, 66, 38, 0.1);
        color: var(--primary);
    }

    .sidebar-nav li.active a {
        background-color: var(--primary);
        color: var(--white);
        border-radius: 0 30px 30px 0;
    }

    /* Main Content */
    .admin-content {
        flex: 1;
        margin-left: 260px;
    }

    /* Header */
    .admin-header {
        background-color: var(--white);
        padding: 15px 30px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: var(--shadow);
        position: sticky;
        top: 0;
        z-index: 99;
    }

    .header-search {
        position: relative;
    }

    .header-search input {
        padding: 10px 15px 10px 40px;
        border: 1px solid var(--gray-light);
        border-radius: 30px;
        width: 300px;
        font-size: 14px;
        transition: var(--transition);
    }

    .header-search input:focus {
        outline: none;
        border-color: var(--primary);
        box-shadow: 0 0 0 2px rgba(107, 66, 38, 0.2);
    }

    .header-search i {
        position: absolute;
        left: 15px;
        top: 50%;
        transform: translateY(-50%);
        color: var(--gray);
    }

    .header-actions {
        display: flex;
        align-items: center;
    }

    .notification {
        position: relative;
        margin-right: 20px;
        cursor: pointer;
    }

    .notification i {
        font-size: 20px;
        color: var(--dark);
    }

    .badge {
        position: absolute;
        top: -8px;
        right: -8px;
        background-color: var(--danger);
        color: var(--white);
        font-size: 10px;
        width: 18px;
        height: 18px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
    }

    .admin-profile {
        display: flex;
        align-items: center;
    }

    .avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
        margin-right: 10px;
    }

    .admin-info {
        display: flex;
        flex-direction: column;
    }

    .admin-name {
        font-size: 14px;
        font-weight: 600;
    }

    .admin-role {
        font-size: 12px;
        color: var(--gray);
    }

    /* Dashboard */
    .admin-dashboard {
        padding: 30px;
    }

    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
    }

    .dashboard-header h1 {
        font-size: 24px;
        font-weight: 600;
        color: var(--dark);
    }

    .dashboard-actions {
        display: flex;
        gap: 15px;
    }

    .btn-export, .btn-refresh {
        padding: 10px 20px;
        border-radius: var(--border-radius);
        border: none;
        font-size: 14px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
        transition: var(--transition);
    }

    .btn-export {
        background-color: var(--white);
        color: var(--primary);
        border: 1px solid var(--primary);
    }

    .btn-export:hover {
        background-color: var(--primary);
        color: var(--white);
    }

    .btn-refresh {
        background-color: var(--light);
        color: var(--dark);
    }

    .btn-refresh:hover {
        background-color: var(--gray-light);
    }

    /* Stats */
    .dashboard-stats {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background-color: var(--white);
        border-radius: var(--border-radius);
        padding: 20px;
        box-shadow: var(--shadow);
        display: flex;
        align-items: center;
    }

    .stat-icon {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 15px;
    }

    .stat-icon i {
        font-size: 24px;
    }

    .stat-info h3 {
        font-size: 14px;
        color: var(--gray);
        margin-bottom: 5px;
    }

    .stat-info p {
        font-size: 24px;
        font-weight: 600;
        color: var(--dark);
    }

    /* Filter Section */
    .filter-section {
        background-color: var(--white);
        border-radius: var(--border-radius);
        padding: 20px;
        box-shadow: var(--shadow);
        margin-bottom: 30px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .filter-group {
        display: flex;
        gap: 15px;
        flex-wrap: wrap;
    }

    .filter-select {
        padding: 10px 15px;
        border: 1px solid var(--gray-light);
        border-radius: var(--border-radius);
        font-size: 14px;
        min-width: 180px;
    }

    .date-range {
        display: flex;
        gap: 10px;
    }

    .date-range input {
        padding: 10px 15px;
        border: 1px solid var(--gray-light);
        border-radius: var(--border-radius);
        font-size: 14px;
    }

    .btn-filter {
        background-color: var(--primary);
        color: var(--white);
        border: none;
        padding: 10px 20px;
        border-radius: var(--border-radius);
        font-size: 14px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
        transition: var(--transition);
    }

    .btn-filter:hover {
        background-color: var(--primary-dark);
    }

    /* Tabs */
    .order-tabs {
        display: flex;
        margin-bottom: 20px;
        overflow-x: auto;
        padding-bottom: 5px;
    }

    .tab-btn {
        padding: 10px 20px;
        background: none;
        border: none;
        border-bottom: 2px solid transparent;
        font-size: 14px;
        font-weight: 500;
        color: var(--gray);
        cursor: pointer;
        transition: var(--transition);
        white-space: nowrap;
    }

    .tab-btn:hover {
        color: var(--primary);
    }

    .tab-btn.active {
        color: var(--primary);
        border-bottom-color: var(--primary);
    }

    /* Orders Table */
    .orders-table-container {
        background-color: var(--white);
        border-radius: var(--border-radius);
        box-shadow: var(--shadow);
        overflow: hidden;
        margin-bottom: 30px;
    }

    .orders-table {
        width: 100%;
        border-collapse: collapse;
    }

    .orders-table th, .orders-table td {
        padding: 15px;
        text-align: left;
        border-bottom: 1px solid var(--gray-light);
    }

    .orders-table th {
        background-color: var(--light);
        font-weight: 600;
        color: var(--dark);
    }

    .orders-table tbody tr:hover {
        background-color: rgba(107, 66, 38, 0.05);
    }

    .order-id a {
        color: var(--primary);
        font-weight: 600;
        text-decoration: none;
    }

    .order-id a:hover {
        text-decoration: underline;
    }

    .customer-info {
        display: flex;
        align-items: center;
    }

    .customer-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        overflow: hidden;
        margin-right: 10px;
    }

    .customer-avatar img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .avatar-placeholder {
        width: 100%;
        height: 100%;
        background-color: var(--primary-light);
        color: var(--white);
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
    }

    .customer-details {
        display: flex;
        flex-direction: column;
    }

    .customer-name {
        font-weight: 500;
    }

    .customer-email {
        font-size: 12px;
        color: var(--gray);
    }

    .product-info {
        display: flex;
        flex-direction: column;
    }

    .product-name {
        font-weight: 500;
        margin-bottom: 4px;
    }

    .product-quantity {
        font-size: 12px;
        color: var(--gray);
    }

    .order-amount {
        font-weight: 600;
        color: var(--primary);
    }

    .status-badge {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
    }

    .status-badge.pending {
        background-color: rgba(255, 152, 0, 0.1);
        color: var(--warning);
    }

    .status-badge.processing {
        background-color: rgba(33, 150, 243, 0.1);
        color: var(--info);
    }

    .status-badge.shipping {
        background-color: rgba(156, 39, 176, 0.1);
        color: #9c27b0;
    }

    .status-badge.completed {
        background-color: rgba(76, 175, 80, 0.1);
        color: var(--success);
    }

    .status-badge.cancelled {
        background-color: rgba(244, 67, 54, 0.1);
        color: var(--danger);
    }

    .actions {
        display: flex;
        gap: 5px;
    }

    .btn-action {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: var(--transition);
    }

    .btn-action.view {
        background-color: rgba(33, 150, 243, 0.1);
        color: var(--info);
    }

    .btn-action.edit {
        background-color: rgba(255, 152, 0, 0.1);
        color: var(--warning);
    }

    .btn-action.print {
        background-color: rgba(76, 175, 80, 0.1);
        color: var(--success);
    }

    .btn-action:hover {
        transform: translateY(-3px);
    }

    .btn-action.view:hover {
        background-color: var(--info);
        color: var(--white);
    }

    .btn-action.edit:hover {
        background-color: var(--warning);
        color: var(--white);
    }

    .btn-action.print:hover {
        background-color: var(--success);
        color: var(--white);
    }

    /* Pagination */
    .pagination {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 20px;
    }

    .pagination-info {
        font-size: 14px;
        color: var(--gray);
    }

    .pagination-controls {
        display: flex;
        align-items: center;
    }

    .pagination-btn {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        border: 1px solid var(--gray-light);
        background-color: var(--white);
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: var(--transition);
    }

    .pagination-btn:hover:not([disabled]) {
        background-color: var(--primary);
        color: var(--white);
        border-color: var(--primary);
    }

    .pagination-btn[disabled] {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .pagination-numbers {
        display: flex;
        margin: 0 10px;
    }

    .pagination-number {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        border: 1px solid var(--gray-light);
        background-color: var(--white);
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 5px;
        cursor: pointer;
        transition: var(--transition);
    }

    .pagination-number:hover {
        background-color: rgba(107, 66, 38, 0.1);
    }

    .pagination-number.active {
        background-color: var(--primary);
        color: var(--white);
        border-color: var(--primary);
    }

    /* Modal */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        overflow-y: auto;
    }

    .modal-content {
        background-color: var(--white);
        border-radius: var(--border-radius);
        width: 90%;
        max-width: 900px;
        margin: 50px auto;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
    }

    .modal-header {
        padding: 20px;
        border-bottom: 1px solid var(--gray-light);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-header h2 {
        font-size: 20px;
        font-weight: 600;
        color: var(--dark);
    }

    .close-modal {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: var(--gray);
    }

    .modal-body {
        padding: 20px;
    }

    .order-info-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
        margin-bottom: 30px;
    }

    .order-info-card {
        background-color: var(--light);
        border-radius: var(--border-radius);
        padding: 20px;
    }

    .order-info-card h3 {
        font-size: 16px;
        font-weight: 600;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid var(--gray-light);
    }

    .info-row {
        margin-bottom: 10px;
        display: flex;
        flex-direction: column;
    }

    .info-label {
        font-size: 12px;
        color: var(--gray);
        margin-bottom: 5px;
    }

    .info-value {
        font-weight: 500;
    }

    .order-items-section {
        margin-bottom: 30px;
    }

    .order-items-section h3 {
        font-size: 16px;
        font-weight: 600;
        margin-bottom: 15px;
    }

    .order-items-table {
        width: 100%;
        border-collapse: collapse;
    }

    .order-items-table th, .order-items-table td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid var(--gray-light);
    }

    .order-items-table th {
        background-color: var(--light);
        font-weight: 600;
    }

    .text-right {
        text-align: right;
    }

    .total-row {
        font-weight: 700;
        color: var(--primary);
    }

    .order-timeline {
        margin-bottom: 20px;
    }

    .order-timeline h3 {
        font-size: 16px;
        font-weight: 600;
        margin-bottom: 15px;
    }

    .timeline {
        position: relative;
        padding-left: 30px;
    }

    .timeline:before {
        content: '';
        position: absolute;
        left: 10px;
        top: 0;
        bottom: 0;
        width: 2px;
        background-color: var(--gray-light);
    }

    .timeline-item {
        position: relative;
        margin-bottom: 20px;
    }

    .timeline-item:last-child {
        margin-bottom: 0;
    }

    .timeline-item:before {
        content: '';
        position: absolute;
        left: -30px;
        top: 0;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background-color: var(--white);
        border: 2px solid var(--primary);
        z-index: 1;
    }

    .timeline-item.active:before {
        background-color: var(--primary);
    }

    .timeline-content {
        background-color: var(--light);
        border-radius: var(--border-radius);
        padding: 15px;
    }

    .timeline-title {
        font-weight: 600;
        margin-bottom: 5px;
    }

    .timeline-date {
        font-size: 12px;
        color: var(--gray);
    }

    .modal-footer {
        padding: 20px;
        border-top: 1px solid var(--gray-light);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .status-update {
        display: flex;
        gap: 10px;
    }

    .status-select {
        padding: 10px 15px;
        border: 1px solid var(--gray-light);
        border-radius: var(--border-radius);
        font-size: 14px;
        min-width: 200px;
    }

    .btn-update {
        background-color: var(--primary);
        color: var(--white);
        border: none;
        padding: 10px 20px;
        border-radius: var(--border-radius);
        font-size: 14px;
        cursor: pointer;
        transition: var(--transition);
    }

    .btn-update:hover {
        background-color: var(--primary-dark);
    }

    .modal-actions {
        display: flex;
        gap: 10px;
    }

    .btn-print, .btn-close {
        padding: 10px 20px;
        border-radius: var(--border-radius);
        font-size: 14px;
        cursor: pointer;
        transition: var(--transition);
        border: none;
    }

    .btn-print {
        background-color: var(--success);
        color: var(--white);
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .btn-print:hover {
        background-color: #388e3c;
    }

    .btn-close {
        background-color: var(--light);
        color: var(--dark);
    }

    .btn-close:hover {
        background-color: var(--gray-light);
    }

    
    }

   
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Tab switching
        const tabButtons = document.querySelectorAll('.tab-btn');
        const orderRows = document.querySelectorAll('.orders-table tbody tr');

        tabButtons.forEach(button => {
            button.addEventListener('click', function() {
                // Remove active class from all buttons
                tabButtons.forEach(btn => btn.classList.remove('active'));
                
                // Add active class to clicked button
                this.classList.add('active');
                
                const tabValue = this.getAttribute('data-tab');
                
                // Show/hide rows based on tab
                orderRows.forEach(row => {
                    const status = row.getAttribute('data-status');
                    if (tabValue === 'all' || status === tabValue) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
        });

        // Search functionality
        const searchInput = document.getElementById('searchInput');
        
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            
            orderRows.forEach(row => {
                const orderId = row.querySelector('.order-id').textContent.toLowerCase();
                const customerName = row.querySelector('.customer-name')?.textContent.toLowerCase() || '';
                const customerEmail = row.querySelector('.customer-email')?.textContent.toLowerCase() || '';
                const productName = row.querySelector('.product-name')?.textContent.toLowerCase() || '';
                
                if (orderId.includes(searchTerm) || 
                    customerName.includes(searchTerm) || 
                    customerEmail.includes(searchTerm) ||
                    productName.includes(searchTerm)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        });

        // Filter functionality
        const applyFilterBtn = document.getElementById('applyFilter');
        const statusFilter = document.getElementById('statusFilter');
        const timeFilter = document.getElementById('timeFilter');
        const startDateInput = document.getElementById('startDate');
        const endDateInput = document.getElementById('endDate');
        
        applyFilterBtn.addEventListener('click', function() {
            const statusValue = statusFilter.value;
            const timeValue = timeFilter.value;
            const startDate = startDateInput.value ? new Date(startDateInput.value) : null;
            const endDate = endDateInput.value ? new Date(endDateInput.value) : null;
            
            orderRows.forEach(row => {
                const status = row.getAttribute('data-status');
                const orderDateStr = row.querySelector('td:nth-child(3)').textContent;
                const orderDate = parseDate(orderDateStr);
                
                let showByStatus = true;
                let showByTime = true;
                
                // Apply status filter
                if (statusValue && status !== statusValue) {
                    showByStatus = false;
                }
                
                // Apply time filter
                if (timeValue && orderDate) {
                    const today = new Date();
                    const yesterday = new Date(today);
                    yesterday.setDate(yesterday.getDate() - 1);
                    
                    const weekAgo = new Date(today);
                    weekAgo.setDate(weekAgo.getDate() - 7);
                    
                    const monthAgo = new Date(today);
                    monthAgo.setDate(monthAgo.getDate() - 30);
                    
                    if (timeValue === 'today' && !isSameDay(orderDate, today)) {
                        showByTime = false;
                    } else if (timeValue === 'yesterday' && !isSameDay(orderDate, yesterday)) {
                        showByTime = false;
                    } else if (timeValue === 'week' && orderDate < weekAgo) {
                        showByTime = false;
                    } else if (timeValue === 'month' && orderDate < monthAgo) {
                        showByTime = false;
                    }
                }
                
                // Apply date range filter
                if ((startDate || endDate) && orderDate) {
                    if (startDate && endDate) {
                        if (orderDate < startDate || orderDate > endDate) {
                            showByTime = false;
                        }
                    } else if (startDate && !endDate) {
                        if (orderDate < startDate) {
                            showByTime = false;
                        }
                    } else if (!startDate && endDate) {
                        if (orderDate > endDate) {
                            showByTime = false;
                        }
                    }
                }
                
                // Show/hide row based on filters
                if (showByStatus && showByTime) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        });

        // Modal functionality
        const modal = document.getElementById('orderDetailModal');
        const closeModalBtns = document.querySelectorAll('.close-modal, .btn-close');
        const viewOrderBtns = document.querySelectorAll('.view-order, .btn-action.view');
        
        viewOrderBtns.forEach(btn => {
            btn.addEventListener('click', function(e) {
                e.preventDefault();
                const orderId = this.getAttribute('data-order-id');
                openOrderModal(orderId);
            });
        });
        
        closeModalBtns.forEach(btn => {
            btn.addEventListener('click', function() {
                modal.style.display = 'none';
            });
        });
        
        window.addEventListener('click', function(e) {
            if (e.target === modal) {
                modal.style.display = 'none';
            }
        });

        // Helper functions
        function parseDate(dateStr) {
            if (dateStr === 'N/A') return null;
            
            const parts = dateStr.split(' ')[0].split('/');
            return new Date(parts[2], parts[1] - 1, parts[0]);
        }
        
        function isSameDay(date1, date2) {
            return date1.getDate() === date2.getDate() &&
                   date1.getMonth() === date2.getMonth() &&
                   date1.getFullYear() === date2.getFullYear();
        }
        
        function openOrderModal(orderId) {
            // Trong ứng dụng thực tế, bạn sẽ gọi API để lấy thông tin chi tiết đơn hàng
            // Ở đây chúng ta sẽ sử dụng dữ liệu mẫu để minh họa
            
            // Hiển thị mã đơn hàng trong modal
            document.getElementById('modalOrderId').textContent = `TCS${orderId.toString().padStart(6, '0')}`;
            document.getElementById('detailOrderId').textContent = `TCS${orderId.toString().padStart(6, '0')}`;
            
            // Thiết lập dữ liệu mẫu
            document.getElementById('detailOrderDate').textContent = '15/05/2023 10:30';
            document.getElementById('detailOrderStatus').textContent = 'Đã xác nhận';
            document.getElementById('detailCartId').textContent = `#${Math.floor(Math.random() * 1000)}`;
            
            document.getElementById('detailCustomerName').textContent = 'Nguyễn Văn A';
            document.getElementById('detailCustomerEmail').textContent = 'nguyenvana@example.com';
            document.getElementById('detailCustomerPhone').textContent = '0912345678';
            document.getElementById('detailCustomerAddress').textContent = '123 Đường Lê Lợi, Quận 1, TP.HCM';
            
            // Thêm sản phẩm vào bảng
            const orderItemsList = document.getElementById('orderItemsList');
            orderItemsList.innerHTML = '';
            
            const items = [
                { name: 'Cà phê Arabica', price: '120,000 VNĐ', quantity: 2, total: '240,000 VNĐ' },
                { name: 'Bánh Croissant', price: '55,000 VNĐ', quantity: 2, total: '110,000 VNĐ' }
            ];
            
            items.forEach(item => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${item.name}</td>
                    <td>${item.price}</td>
                    <td>${item.quantity}</td>
                    <td>${item.total}</td>
                `;
                orderItemsList.appendChild(row);
            });
            
            // Thiết lập tổng tiền
            document.getElementById('subtotal').textContent = '350,000 VNĐ';
            document.getElementById('shippingFee').textContent = '30,000 VNĐ';
            document.getElementById('totalAmount').textContent = '380,000 VNĐ';
            
            // Thêm lịch sử đơn hàng
            const orderTimeline = document.getElementById('orderTimeline');
            orderTimeline.innerHTML = '';
            
            const timeline = [
                { title: 'Đơn hàng đã đặt', date: '15/05/2023 09:30', active: true },
                { title: 'Đã xác nhận đơn hàng', date: '15/05/2023 10:00', active: true },
                { title: 'Đang chuẩn bị đơn hàng', date: '15/05/2023 11:30', active: false },
                { title: 'Đang giao hàng', date: '', active: false },
                { title: 'Đã giao hàng', date: '', active: false }
            ];
            
            timeline.forEach(item => {
                const timelineItem = document.createElement('div');
                timelineItem.className = `timeline-item ${item.active ? 'active' : ''}`;
                timelineItem.innerHTML = `
                    <div class="timeline-content">
                        <div class="timeline-title">${item.title}</div>
                        <div class="timeline-date">${item.date || 'Chưa cập nhật'}</div>
                    </div>
                `;
                orderTimeline.appendChild(timelineItem);
            });
            
            // Hiển thị modal
            modal.style.display = 'block';
        }
    });
</script>

@functions {
    public string GetOrderStatus(TheCoffeeShop.Models.Order order)
    {
        // Trong ứng dụng thực tế, bạn sẽ lấy trạng thái từ thuộc tính Status của đơn hàng
        // Ở đây chúng ta sẽ giả định một trạng thái dựa trên OrderId để minh họa
        
        if (order.OrderId % 5 == 0) return "cancelled";
        if (order.OrderId % 4 == 0) return "completed";
        if (order.OrderId % 3 == 0) return "shipping";
        if (order.OrderId % 2 == 0) return "processing";
        return "pending";
    }

    public string GetStatusText(string status)
    {
        switch (status.ToLower())
        {
            case "pending": return "Chờ xác nhận";
            case "processing": return "Đang xử lý";
            case "shipping": return "Đang giao hàng";
            case "completed": return "Đã hoàn thành";
            case "cancelled": return "Đã hủy";
            default: return status;
        }
    }
}