@model IEnumerable<TheCoffeeShop.Models.Product>
@{
    ViewData["Title"] = "Quản lý sản phẩm";

}

<div class="admin-container">
    <div class="admin-sidebar">
        <div class="sidebar-header">
            <img src="/Content/Images/logo.png" alt="The Coffee Shop" class="logo">
            <h2>The Coffee Shop</h2>
        </div>
        <nav class="sidebar-nav">
            <ul>
                <li><a href="/Admin/Dashboard"><i class="fas fa-tachometer-alt"></i> Tổng quan</a></li>
                <li ><a href="/Order/AdminIndex"><i class="fas fa-shopping-cart"></i> Quản lý đơn hàng</a></li>
                <li class="active"><a href="/Product/AdminIndex"><i class="fas fa-coffee"></i> Sản phẩm</a></li>
                <li><a href="/Category/AdminIndex"><i class="fas fa-tags"></i> Danh mục</a></li>
                <li><a href="/Admin/Users"><i class="fas fa-users"></i> Khách hàng</a></li>
                <li><a href="/Admin/Reports"><i class="fas fa-chart-bar"></i> Báo cáo</a></li>
            </ul>
        </nav>
    </div>

    <div class="admin-content">
        <div class="admin-header">
            <div class="header-search">
                <i class="fas fa-search"></i>
                <input type="text" id="searchInput" placeholder="Tìm kiếm sản phẩm...">

            </div>
            <div class="header-actions">
                <div class="notification">
                    <i class="fas fa-bell"></i>
                    <span class="badge">3</span>
                </div>
                <div class="admin-profile">
                    <img src="/Content/Images/admin-avatar.jpg" alt="Admin" class="avatar">
                    <div class="admin-info">
                        <span class="admin-name">Admin</span>
                        <span class="admin-role">Quản trị viên</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="admin-dashboard">
            <div class="dashboard-header">
                <h1>Quản lý sản phẩm</h1>
                <div class="dashboard-actions">
                    <button class="btn-export"><i class="fas fa-file-export"></i> Xuất báo cáo</button>
                    <button class="btn-add" id="addProductBtn"><i class="fas fa-plus"></i> Thêm sản phẩm</button>
                </div>
            </div>

            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success">
                    <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
                    <button type="button" class="close-alert">&times;</button>
                </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-circle"></i> @TempData["ErrorMessage"]
                    <button type="button" class="close-alert">&times;</button>
                </div>
            }

            <div class="dashboard-stats">
                <div class="stat-card">
                    <div class="stat-icon" style="background-color: rgba(76, 175, 80, 0.1);">
                        <i class="fas fa-coffee" style="color: #4CAF50;"></i>
                    </div>
                    <div class="stat-info">
                        <h3>Tổng sản phẩm</h3>
                        <p>@ViewBag.TotalProducts</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon" style="background-color: rgba(33, 150, 243, 0.1);">
                        <i class="fas fa-tags" style="color: #2196F3;"></i>
                    </div>
                    <div class="stat-info">
                        <h3>Tổng danh mục</h3>
                        <p>@ViewBag.TotalCategories</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon" style="background-color: rgba(255, 152, 0, 0.1);">
                        <i class="fas fa-star" style="color: #FF9800;"></i>
                    </div>
                    <div class="stat-info">
                        <h3>Sản phẩm bán chạy</h3>
                        <p>@ViewBag.BestSellingProducts</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon" style="background-color: rgba(244, 67, 54, 0.1);">
                        <i class="fas fa-exclamation-triangle" style="color: #F44336;"></i>
                    </div>
                    <div class="stat-info">
                        <h3>Sản phẩm hết hàng</h3>
                        <p>@ViewBag.OutOfStockProducts</p>
                    </div>
                </div>
            </div>

            <div class="filter-section">
                <div class="filter-group">
                    <select id="categoryFilter" class="filter-select">
                        <option value="">Tất cả danh mục</option>
                        @foreach (var category in ViewBag.Categories)
                        {
                            <option value="@category.CategoryId">@category.CategoryName</option>
                        }
                    </select>
                    <select id="statusFilter" class="filter-select">
                        <option value="">Tất cả trạng thái</option>
                        <option value="active">Đang bán</option>
                        <option value="outofstock">Hết hàng</option>
                    </select>
                    <select id="sortFilter" class="filter-select">
                        <option value="name_asc">Tên A-Z</option>
                        <option value="name_desc">Tên Z-A</option>
                        <option value="price_asc">Giá tăng dần</option>
                        <option value="price_desc">Giá giảm dần</option>
                    </select>
                </div>
                <div class="view-toggle">
                    <button id="gridViewBtn" class="view-btn active" title="Xem dạng lưới">
                        <i class="fas fa-th"></i>
                    </button>
                    <button id="listViewBtn" class="view-btn" title="Xem dạng bảng">
                        <i class="fas fa-list"></i>
                    </button>
                </div>
            </div>

            <!-- Grid View -->
            <div id="gridView" class="products-grid">
                @foreach (var product in Model)
                {
                    <div class="product-card" data-category="@product.CategoryId">
                        <div class="product-image-container">
                            @if (!string.IsNullOrEmpty(product.ProductImage))
                            {
                                <img src="@product.ProductImage" alt="@product.ProductName" class="product-image">
                            }
                            else
                            {
                                <div class="no-image">
                                    <i class="fas fa-image"></i>
                                </div>
                            }

                        </div>
                        <div class="product-content">
                            <h3 class="product-name">@product.ProductName</h3>
                            <div class="product-category">
                                <i class="fas fa-tag"></i> @product.Category.CategoryName
                            </div>
                            <div class="product-price">@string.Format("{0:N0}", product.ProductPrice) VNĐ</div>
                            <div class="product-actions">
     
                                <button class="btn-action view" data-product-id="@product.ProductId" title="Xem chi tiết">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <button class="btn-action edit" data-product-id="@product.ProductId" title="Chỉnh sửa">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn-action delete" data-product-id="@product.ProductId" title="Xóa">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Table View -->
            <div id="tableView" class="products-table-container" style="display: none;">
                <table class="products-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Hình ảnh</th>
                            <th>Tên sản phẩm</th>
                            <th>Danh mục</th>
                            <th>Giá</th>
                            <th>Tồn kho</th>
                            <th>Trạng thái</th>
                            <th>Thao tác</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in Model)
                        {
                            <tr data-category="@product.CategoryId">
                                <td class="product-id">@product.ProductId</td>
                                <td class="product-img">
                                    @if (!string.IsNullOrEmpty(product.ProductImage))
                                    {
                                        <img src="@product.ProductImage" alt="@product.ProductName" class="table-img">
                                    }
                                    else
                                    {
                                        <div class="no-table-img">
                                            <i class="fas fa-image"></i>
                                        </div>
                                    }
                                </td>
                                <td class="product-name">@product.ProductName</td>
                                <td class="product-category">@product.Category.CategoryName</td>
                                <td class="product-price">@string.Format("{0:N0}", product.ProductPrice) VNĐ</td>
                                <td class="product-stock"></td>
                                <td>
                                    <p>Còn hàng</p>
                                </td>
                                <td class="actions">
                                    <button class="btn-action view" data-product-id="@product.ProductId" title="Xem chi tiết">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn-action edit" data-product-id="@product.ProductId" title="Chỉnh sửa">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn-action delete" data-product-id="@product.ProductId" title="Xóa">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="pagination">
                <span class="pagination-info">Hiển thị 1-@(Model.Count() < 10 ? Model.Count() : 10) của @Model.Count() sản phẩm</span>
                <div class="pagination-controls">
                    <button class="pagination-btn" disabled><i class="fas fa-chevron-left"></i></button>
                    <div class="pagination-numbers">
                        <button class="pagination-number active">1</button>
                        @if (Model.Count() > 10)
                        {
                            <button class="pagination-number">2</button>
                        }
                        @if (Model.Count() > 20)
                        {
                            <button class="pagination-number">3</button>
                        }
                    </div>
                    <button class="pagination-btn" @(Model.Count() <= 10 ? "disabled" : "")><i class="fas fa-chevron-right"></i></button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal Xem Chi Tiết Sản Phẩm -->
<div id="productDetailModal" class="modal">
    <div class="modal-content modal-lg">
        <div class="modal-header">
            <h2>Chi tiết sản phẩm</h2>
            <button class="close-modal">&times;</button>
        </div>
        <div class="modal-body">
            <div class="product-detail">
                <div class="product-detail-image">
                    <img id="detailProductImage" src="/placeholder.svg" alt="Product Image">
                </div>
                <div class="product-detail-info">
                    <h3 id="detailProductName"></h3>
                    <div class="detail-row">
                        <span class="detail-label">Danh mục:</span>
                        <span id="detailProductCategory" class="detail-value"></span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">Giá:</span>
                        <span id="detailProductPrice" class="detail-value"></span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">Tồn kho:</span>
                        <span id="detailProductStock" class="detail-value"></span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">Trạng thái:</span>
                        <span id="detailProductStatus" class="detail-value"></span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">Mô tả:</span>
                        <p id="detailProductDescription" class="detail-value"></p>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn-close">Đóng</button>
            <button type="button" class="btn-edit" id="detailEditBtn">Chỉnh sửa</button>
        </div>
    </div>
</div>

<!-- Modal Thêm/Sửa Sản Phẩm -->
<div id="productFormModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 id="productFormTitle">Thêm sản phẩm mới</h2>
            <button class="close-modal">&times;</button>
        </div>
        <div class="modal-body">
            <form id="productForm" method="post" enctype="multipart/form-data">
                <input type="hidden" id="productId" name="ProductId" value="0">

                <div class="form-group">
                    <label for="productName">Tên sản phẩm</label>
                    <input type="text" id="productName" name="ProductName" class="form-control" required>
                    <div class="invalid-feedback">Vui lòng nhập tên sản phẩm</div>
                </div>

                <div class="form-group">
                    <label for="categoryId">Danh mục</label>
                    <select id="categoryId" name="CategoryId" class="form-control" required>
                        <option value="">-- Chọn danh mục --</option>
                        @foreach (var category in ViewBag.Categories)
                        {
                            <option value="@category.CategoryId">@category.CategoryName</option>
                        }
                    </select>
                    <div class="invalid-feedback">Vui lòng chọn danh mục</div>
                </div>

                <div class="form-group">
                    <label for="productPrice">Giá (VNĐ)</label>
                    <input type="number" id="productPrice" name="Price" class="form-control" min="0" required>
                    <div class="invalid-feedback">Vui lòng nhập giá hợp lệ</div>
                </div>

                <div class="form-group">
                    <label for="productStock">Số lượng tồn kho</label>
                    <input type="number" id="productStock" name="Stock" class="form-control" min="0" required>
                    <div class="invalid-feedback">Vui lòng nhập số lượng hợp lệ</div>
                </div>

                <div class="form-group">
                    <label for="productDescription">Mô tả</label>
                    <textarea id="productDescription" name="Description" class="form-control" rows="4"></textarea>
                </div>

                <div class="form-group">
                    <label for="productImage">Hình ảnh</label>
                    <div class="image-upload-container">
                        <div class="image-preview" id="imagePreview">
                            <img id="previewImg" src="/Content/Images/product-placeholder.jpg" alt="Preview">
                            <div class="image-upload-overlay">
                                <i class="fas fa-camera"></i>
                                <span>Chọn ảnh</span>
                            </div>
                        </div>
                        <input type="file" id="productImage" name="ImageFile" class="form-control-file" accept="image/*">
                    </div>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn-cancel">Hủy</button>
            <button type="button" class="btn-save" id="saveProduct">Lưu</button>
        </div>
    </div>
</div>

<!-- Modal Xác Nhận Xóa -->
<div id="deleteModal" class="modal">
    <div class="modal-content modal-sm">
        <div class="modal-header">
            <h2>Xác nhận xóa</h2>
            <button class="close-modal">&times;</button>
        </div>
        <div class="modal-body">
            <p>Bạn có chắc chắn muốn xóa sản phẩm này?</p>
            <p class="text-danger"><small>Hành động này không thể hoàn tác.</small></p>
        </div>
        <div class="modal-footer">
            <form id="deleteForm" method="post">
                <input type="hidden" id="deleteProductId" name="id">
                @Html.AntiForgeryToken()
                <button type="button" class="btn-cancel">Hủy</button>
                <button type="submit" class="btn-delete">Xóa</button>
            </form>
        </div>
    </div>
</div>

<style>
    :root {
        --primary: #6b4226;
        --primary-light: #8c6242;
        --primary-dark: #4e301c;
        --secondary: #a67c52;
        --accent: #d4a762;
        --accent-light: #e9d2b3;
        --success: #4caf50;
        --warning: #ff9800;
        --danger: #f44336;
        --info: #2196f3;
        --dark: #333333;
        --light: #f5f5f5;
        --gray: #757575;
        --gray-light: #e0e0e0;
        --white: #ffffff;
        --shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        --border-radius: 8px;
        --transition: all 0.3s ease;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Poppins', sans-serif;
        background-color: #f5f5f5;
        color: var(--dark);
    }

    /* Admin Layout */
    .admin-container {
        display: flex;
        min-height: 100vh;
    }

    /* Sidebar */
    .admin-sidebar {
        width: 260px;
        background-color: var(--white);
        box-shadow: var(--shadow);
        position: fixed;
        height: 100vh;
        z-index: 100;
    }

    .sidebar-header {
        padding: 20px;
        display: flex;
        align-items: center;
        border-bottom: 1px solid var(--gray-light);
    }

    .logo {
        width: 40px;
        height: 40px;
        margin-right: 10px;
    }

    .sidebar-header h2 {
        font-size: 18px;
        color: var(--primary);
        font-weight: 600;
    }

    .sidebar-nav {
        padding: 20px 0;
    }

        .sidebar-nav ul {
            list-style: none;
        }

        .sidebar-nav li {
            margin-bottom: 5px;
        }

        .sidebar-nav a {
            display: flex;
            align-items: center;
            padding: 12px 20px;
            color: var(--dark);
            text-decoration: none;
            transition: var(--transition);
            font-size: 14px;
        }

            .sidebar-nav a i {
                margin-right: 10px;
                font-size: 18px;
                width: 20px;
                text-align: center;
            }

            .sidebar-nav a:hover {
                background-color: rgba(107, 66, 38, 0.1);
                color: var(--primary);
            }

        .sidebar-nav li.active a {
            background-color: var(--primary);
            color: var(--white);
            border-radius: 0 30px 30px 0;
        }

    /* Main Content */
    .admin-content {
        flex: 1;
        margin-left: 260px;
    }

    /* Header */
    .admin-header {
        background-color: var(--white);
        padding: 15px 30px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: var(--shadow);
        position: sticky;
        top: 0;
        z-index: 99;
    }

    .header-search {
        position: relative;
    }

        .header-search input {
            padding: 10px 15px 10px 40px;
            border: 1px solid var(--gray-light);
            border-radius: 30px;
            width: 300px;
            font-size: 14px;
            transition: var(--transition);
        }

            .header-search input:focus {
                outline: none;
                border-color: var(--primary);
                box-shadow: 0 0 0 2px rgba(107, 66, 38, 0.2);
            }

        .header-search i {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--gray);
        }

    .header-actions {
        display: flex;
        align-items: center;
    }

    .notification {
        position: relative;
        margin-right: 20px;
        cursor: pointer;
    }

        .notification i {
            font-size: 20px;
            color: var(--dark);
        }

    .badge {
        position: absolute;
        top: -8px;
        right: -8px;
        background-color: var(--danger);
        color: var(--white);
        font-size: 10px;
        width: 18px;
        height: 18px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
    }

    .admin-profile {
        display: flex;
        align-items: center;
    }

    .avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
        margin-right: 10px;
    }

    .admin-info {
        display: flex;
        flex-direction: column;
    }

    .admin-name {
        font-size: 14px;
        font-weight: 600;
    }

    .admin-role {
        font-size: 12px;
        color: var(--gray);
    }

    /* Dashboard */
    .admin-dashboard {
        padding: 30px;
    }

    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
    }

        .dashboard-header h1 {
            font-size: 24px;
            font-weight: 600;
            color: var(--dark);
        }

    .dashboard-actions {
        display: flex;
        gap: 15px;
    }

    .btn-export, .btn-add {
        padding: 10px 20px;
        border-radius: var(--border-radius);
        border: none;
        font-size: 14px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
        transition: var(--transition);
    }

    .btn-export {
        background-color: var(--white);
        color: var(--primary);
        border: 1px solid var(--primary);
    }

        .btn-export:hover {
            background-color: var(--primary);
            color: var(--white);
        }

    .btn-add {
        background-color: var(--primary);
        color: var(--white);
    }

        .btn-add:hover {
            background-color: var(--primary-dark);
        }

    /* Alert */
    .alert {
        padding: 15px;
        border-radius: var(--border-radius);
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        position: relative;
    }

        .alert i {
            margin-right: 10px;
            font-size: 18px;
        }

    .alert-success {
        background-color: rgba(76, 175, 80, 0.1);
        color: var(--success);
        border-left: 4px solid var(--success);
    }

    .alert-danger {
        background-color: rgba(244, 67, 54, 0.1);
        color: var(--danger);
        border-left: 4px solid var(--danger);
    }

    .close-alert {
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        font-size: 18px;
        cursor: pointer;
        color: inherit;
    }

    /* Stats */
    .dashboard-stats {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background-color: var(--white);
        border-radius: var(--border-radius);
        padding: 20px;
        box-shadow: var(--shadow);
        display: flex;
        align-items: center;
    }

    .stat-icon {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 15px;
    }

        .stat-icon i {
            font-size: 24px;
        }

    .stat-info h3 {
        font-size: 14px;
        color: var(--gray);
        margin-bottom: 5px;
    }

    .stat-info p {
        font-size: 24px;
        font-weight: 600;
        color: var(--dark);
    }

    /* Filter Section */
    .filter-section {
        background-color: var(--white);
        border-radius: var(--border-radius);
        padding: 20px;
        box-shadow: var(--shadow);
        margin-bottom: 30px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .filter-group {
        display: flex;
        gap: 15px;
        flex-wrap: wrap;
    }

    .filter-select {
        padding: 10px 15px;
        border: 1px solid var(--gray-light);
        border-radius: var(--border-radius);
        font-size: 14px;
        min-width: 180px;
    }

    .view-toggle {
        display: flex;
        gap: 10px;
    }

    .view-btn {
        width: 40px;
        height: 40px;
        border-radius: var(--border-radius);
        border: 1px solid var(--gray-light);
        background-color: var(--white);
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: var(--transition);
    }

        .view-btn.active {
            background-color: var(--primary);
            color: var(--white);
            border-color: var(--primary);
        }

    /* Products Grid */
    .products-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .product-card {
        background-color: var(--white);
        border-radius: var(--border-radius);
        overflow: hidden;
        box-shadow: var(--shadow);
        transition: var(--transition);
    }

        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

    .product-image-container {
        height: 180px;
        position: relative;
        background-color: var(--light);
    }

    .product-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .no-image {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--gray);
        font-size: 24px;
    }

    .product-status {
        position: absolute;
        top: 10px;
        right: 10px;
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
    }

        .product-status.active {
            background-color: rgba(76, 175, 80, 0.1);
            color: var(--success);
        }

        .product-status.outofstock {
            background-color: rgba(244, 67, 54, 0.1);
            color: var(--danger);
        }

    .product-content {
        padding: 15px;
    }

    .product-name {
        font-size: 16px;
        font-weight: 600;
        color: var(--dark);
        margin-bottom: 8px;
        height: 40px;
        overflow: hidden;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }

    .product-category {
        font-size: 14px;
        color: var(--gray);
        margin-bottom: 8px;
    }

    .product-price {
        font-size: 18px;
        font-weight: 600;
        color: var(--primary);
        margin-bottom: 15px;
    }

    .product-actions {
        display: flex;
        gap: 10px;
    }

    .btn-action {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: var(--transition);
    }

        .btn-action.view {
            background-color: rgba(33, 150, 243, 0.1);
            color: var(--info);
        }

        .btn-action.edit {
            background-color: rgba(255, 152, 0, 0.1);
            color: var(--warning);
        }

        .btn-action.delete {
            background-color: rgba(244, 67, 54, 0.1);
            color: var(--danger);
        }

        .btn-action:hover {
            transform: translateY(-3px);
        }

        .btn-action.view:hover {
            background-color: var(--info);
            color: var(--white);
        }

        .btn-action.edit:hover {
            background-color: var(--warning);
            color: var(--white);
        }

        .btn-action.delete:hover {
            background-color: var(--danger);
            color: var(--white);
        }

    /* Products Table */
    .products-table-container {
        background-color: var(--white);
        border-radius: var(--border-radius);
        box-shadow: var(--shadow);
        overflow: hidden;
        margin-bottom: 30px;
    }

    .products-table {
        width: 100%;
        border-collapse: collapse;
    }

        .products-table th, .products-table td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid var(--gray-light);
        }

        .products-table th {
            background-color: var(--primary);
            color: var(--white);
            font-weight: 600;
        }

        .products-table tbody tr:hover {
            background-color: rgba(107, 66, 38, 0.05);
        }

    .table-img {
        width: 50px;
        height: 50px;
        object-fit: cover;
        border-radius: var(--border-radius);
    }

    .no-table-img {
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: var(--light);
        border-radius: var(--border-radius);
        color: var(--gray);
    }

    .status-badge {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
    }

        .status-badge.active {
            background-color: rgba(76, 175, 80, 0.1);
            color: var(--success);
        }

        .status-badge.outofstock {
            background-color: rgba(244, 67, 54, 0.1);
            color: var(--danger);
        }

    /* Pagination */
    .pagination {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 20px;
    }

    .pagination-info {
        font-size: 14px;
        color: var(--gray);
    }

    .pagination-controls {
        display: flex;
        align-items: center;
    }

    .pagination-btn {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        border: 1px solid var(--gray-light);
        background-color: var(--white);
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: var(--transition);
    }

        .pagination-btn:hover:not([disabled]) {
            background-color: var(--primary);
            color: var(--white);
            border-color: var(--primary);
        }

        .pagination-btn[disabled] {
            opacity: 0.5;
            cursor: not-allowed;
        }

    .pagination-numbers {
        display: flex;
        margin: 0 10px;
    }

    .pagination-number {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        border: 1px solid var(--gray-light);
        background-color: var(--white);
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 5px;
        cursor: pointer;
        transition: var(--transition);
    }

        .pagination-number:hover {
            background-color: rgba(107, 66, 38, 0.1);
        }

        .pagination-number.active {
            background-color: var(--primary);
            color: var(--white);
            border-color: var(--primary);
        }

    /* Modal */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        overflow-y: auto;
    }

    .modal-content {
        background-color: var(--white);
        border-radius: var(--border-radius);
        width: 90%;
        max-width: 500px;
        margin: 50px auto;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
    }

        .modal-content.modal-lg {
            max-width: 800px;
        }

        .modal-content.modal-sm {
            max-width: 400px;
        }

    .modal-header {
        padding: 20px;
        border-bottom: 1px solid var(--gray-light);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .modal-header h2 {
            font-size: 20px;
            font-weight: 600;
            color: var(--dark);
        }

    .close-modal {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: var(--gray);
    }

    .modal-body {
        padding: 20px;
    }

    .modal-footer {
        padding: 20px;
        border-top: 1px solid var(--gray-light);
        display: flex;
        justify-content: flex-end;
        gap: 10px;
    }

    /* Product Detail */
    .product-detail {
        display: flex;
        gap: 30px;
    }

    .product-detail-image {
        flex: 0 0 300px;
        height: 300px;
        border-radius: var(--border-radius);
        overflow: hidden;
        background-color: var(--light);
    }

        .product-detail-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .product-detail-info {
        flex: 1;
    }

        .product-detail-info h3 {
            font-size: 24px;
            font-weight: 600;
            color: var(--dark);
            margin-bottom: 20px;
        }

    .detail-row {
        margin-bottom: 15px;
    }

    .detail-label {
        font-weight: 600;
        color: var(--gray);
        margin-right: 10px;
    }

    .detail-value {
        color: var(--dark);
    }

    /* Form */
    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }

    .form-control {
        width: 100%;
        padding: 10px 15px;
        border: 1px solid var(--gray-light);
        border-radius: var(--border-radius);
        font-size: 14px;
        transition: var(--transition);
    }

        .form-control:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 2px rgba(107, 66, 38, 0.2);
        }

        .form-control.is-invalid {
            border-color: var(--danger);
        }

    .invalid-feedback {
        display: none;
        color: var(--danger);
        font-size: 12px;
        margin-top: 5px;
    }

    .form-control.is-invalid + .invalid-feedback {
        display: block;
    }

    /* Image Upload */
    .image-upload-container {
        position: relative;
    }

    .image-preview {
        width: 100%;
        height: 200px;
        border-radius: var(--border-radius);
        overflow: hidden;
        position: relative;
        cursor: pointer;
    }

        .image-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .image-upload-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        color: var(--white);
        opacity: 0;
        transition: var(--transition);
    }

    .image-preview:hover .image-upload-overlay {
        opacity: 1;
    }

    .image-upload-overlay i {
        font-size: 24px;
        margin-bottom: 10px;
    }

    .form-control-file {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
    }

    /* Buttons */
    .btn-save, .btn-cancel, .btn-close, .btn-delete, .btn-edit {
        padding: 10px 20px;
        border-radius: var(--border-radius);
        font-size: 14px;
        cursor: pointer;
        transition: var(--transition);
        border: none;
    }

    .btn-save {
        background-color: var(--primary);
        color: var(--white);
    }

        .btn-save:hover {
            background-color: var(--primary-dark);
        }

    .btn-edit {
        background-color: var(--warning);
        color: var(--white);
    }

        .btn-edit:hover {
            background-color: #e68a00;
        }

    .btn-cancel, .btn-close {
        background-color: var(--light);
        color: var(--dark);
    }

        .btn-cancel:hover, .btn-close:hover {
            background-color: var(--gray-light);
        }

    .btn-delete {
        background-color: var(--danger);
        color: var(--white);
    }

        .btn-delete:hover {
            background-color: #d32f2f;
        }

    .text-danger {
        color: var(--danger);
    }

    }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Elements
        const searchInput = document.getElementById('searchInput');
        const categoryFilter = document.getElementById('categoryFilter');
        const statusFilter = document.getElementById('statusFilter');
        const sortFilter = document.getElementById('sortFilter');
        const gridViewBtn = document.getElementById('gridViewBtn');
        const listViewBtn = document.getElementById('listViewBtn');
        const gridView = document.getElementById('gridView');
        const tableView = document.getElementById('tableView');
        const productCards = document.querySelectorAll('.product-card');
        const productRows = document.querySelectorAll('.products-table tbody tr');
        const addProductBtn = document.getElementById('addProductBtn');
        const productFormModal = document.getElementById('productFormModal');
        const productDetailModal = document.getElementById('productDetailModal');
        const deleteModal = document.getElementById('deleteModal');
        const closeModalBtns = document.querySelectorAll('.close-modal, .btn-cancel, .btn-close');
        const saveProductBtn = document.getElementById('saveProduct');
        const productForm = document.getElementById('productForm');
        const productIdInput = document.getElementById('productId');
        const productNameInput = document.getElementById('productName');
        const categoryIdInput = document.getElementById('categoryId');
        const productPriceInput = document.getElementById('productPrice');
        const productStockInput = document.getElementById('productStock');
        const productDescriptionInput = document.getElementById('productDescription');
        const productImageInput = document.getElementById('productImage');
        const imagePreview = document.getElementById('previewImg');
        const productFormTitle = document.getElementById('productFormTitle');
        const deleteForm = document.getElementById('deleteForm');
        const deleteProductIdInput = document.getElementById('deleteProductId');
        const alertElements = document.querySelectorAll('.alert');
        const closeAlertBtns = document.querySelectorAll('.close-alert');
        const detailEditBtn = document.getElementById('detailEditBtn');

        // Close alerts
        closeAlertBtns.forEach(btn => {
            btn.addEventListener('click', function() {
                this.closest('.alert').style.display = 'none';
            });
        });

        // Auto-hide alerts after 5 seconds
        setTimeout(() => {
            alertElements.forEach(alert => {
                alert.style.display = 'none';
            });
        }, 5000);

        // Search functionality
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();

            filterProducts();
        });

        // Filter functionality
        categoryFilter.addEventListener('change', filterProducts);
        statusFilter.addEventListener('change', filterProducts);
        sortFilter.addEventListener('change', sortProducts);

        function filterProducts() {
            const searchTerm = searchInput.value.toLowerCase();
            const categoryValue = categoryFilter.value;
            const statusValue = statusFilter.value;

            // Filter grid view
            productCards.forEach(card => {
                const productName = card.querySelector('.product-name').textContent.toLowerCase();
                const categoryId = card.getAttribute('data-category');
                const status = card.getAttribute('data-status');

                const matchesSearch = productName.includes(searchTerm);
                const matchesCategory = !categoryValue || categoryId === categoryValue;
                const matchesStatus = !statusValue || status === statusValue;

                if (matchesSearch && matchesCategory && matchesStatus) {
                    card.style.display = '';
                } else {
                    card.style.display = 'none';
                }
            });

            // Filter table view
            productRows.forEach(row => {
                const productName = row.querySelector('.product-name').textContent.toLowerCase();
                const categoryId = row.getAttribute('data-category');
                const status = row.getAttribute('data-status');

                const matchesSearch = productName.includes(searchTerm);
                const matchesCategory = !categoryValue || categoryId === categoryValue;
                const matchesStatus = !statusValue || status === statusValue;

                if (matchesSearch && matchesCategory && matchesStatus) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        function sortProducts() {
            const sortValue = sortFilter.value;
            const gridItems = Array.from(productCards);
            const tableItems = Array.from(productRows);

            // Sort grid items
            gridItems.sort((a, b) => {
                if (sortValue === 'name_asc') {
                    return a.querySelector('.product-name').textContent.localeCompare(b.querySelector('.product-name').textContent);
                } else if (sortValue === 'name_desc') {
                    return b.querySelector('.product-name').textContent.localeCompare(a.querySelector('.product-name').textContent);
                } else if (sortValue === 'price_asc') {
                    return parseFloat(a.querySelector('.product-price').textContent) - parseFloat(b.querySelector('.product-price').textContent);
                } else if (sortValue === 'price_desc') {
                    return parseFloat(b.querySelector('.product-price').textContent) - parseFloat(a.querySelector('.product-price').textContent);
                }
                return 0;
            });

            // Reorder grid items
            const gridContainer = document.getElementById('gridView');
            gridItems.forEach(item => {
                gridContainer.appendChild(item);
            });

            // Sort table items
            tableItems.sort((a, b) => {
                if (sortValue === 'name_asc') {
                    return a.querySelector('.product-name').textContent.localeCompare(b.querySelector('.product-name').textContent);
                } else if (sortValue === 'name_desc') {
                    return b.querySelector('.product-name').textContent.localeCompare(a.querySelector('.product-name').textContent);
                } else if (sortValue === 'price_asc') {
                    return parseFloat(a.querySelector('.product-price').textContent) - parseFloat(b.querySelector('.product-price').textContent);
                } else if (sortValue === 'price_desc') {
                    return parseFloat(b.querySelector('.product-price').textContent) - parseFloat(a.querySelector('.product-price').textContent);
                }
                return 0;
            });

            // Reorder table items
            const tableBody = document.querySelector('.products-table tbody');
            tableItems.forEach(item => {
                tableBody.appendChild(item);
            });
        }

        // View toggle
        gridViewBtn.addEventListener('click', function() {
            gridView.style.display = 'grid';
            tableView.style.display = 'none';
            gridViewBtn.classList.add('active');
            listViewBtn.classList.remove('active');
            localStorage.setItem('productViewMode', 'grid');
        });

        listViewBtn.addEventListener('click', function() {
            gridView.style.display = 'none';
            tableView.style.display = 'block';
            gridViewBtn.classList.remove('active');
            listViewBtn.classList.add('active');
            localStorage.setItem('productViewMode', 'list');
        });

        // Set initial view based on localStorage
        const currentView = localStorage.getItem('productViewMode') || 'grid';
        if (currentView === 'grid') {
            gridView.style.display = 'grid';
            tableView.style.display = 'none';
            gridViewBtn.classList.add('active');
            listViewBtn.classList.remove('active');
        } else {
            gridView.style.display = 'none';
            tableView.style.display = 'block';
            gridViewBtn.classList.remove('active');
            listViewBtn.classList.add('active');
        }

        // Add Product
        addProductBtn.addEventListener('click', function() {
            resetProductForm();
            productFormTitle.textContent = 'Thêm sản phẩm mới';
            productForm.action = '/Order/CreateProduct';
            productFormModal.style.display = 'block';
        });

        // View Product Details
        document.querySelectorAll('.btn-action.view').forEach(btn => {
            btn.addEventListener('click', function() {
                const productId = this.getAttribute('data-product-id');
                loadProductDetails(productId);
                productDetailModal.style.display = 'block';
            });
        });

        // Edit Product
        document.querySelectorAll('.btn-action.edit').forEach(btn => {
            btn.addEventListener('click', function() {
                const productId = this.getAttribute('data-product-id');
                loadProductForEdit(productId);
                productFormModal.style.display = 'block';
            });
        });

        // Delete Product
        document.querySelectorAll('.btn-action.delete').forEach(btn => {
            btn.addEventListener('click', function() {
                const productId = this.getAttribute('data-product-id');
                deleteProductIdInput.value = productId;
                deleteForm.action = '/Order/DeleteProduct/' + productId;
                deleteModal.style.display = 'block';
            });
        });

        // Edit from Detail View
        detailEditBtn.addEventListener('click', function() {
            const productId = this.getAttribute('data-product-id');
            loadProductForEdit(productId);
            productDetailModal.style.display = 'none';
            productFormModal.style.display = 'block';
        });

        // Close Modals
        closeModalBtns.forEach(btn => {
            btn.addEventListener('click', function() {
                productFormModal.style.display = 'none';
                productDetailModal.style.display = 'none';
                deleteModal.style.display = 'none';
            });
        });

        // Close Modal on Outside Click
        window.addEventListener('click', function(e) {
            if (e.target === productFormModal) {
                productFormModal.style.display = 'none';
            }
            if (e.target === productDetailModal) {
                productDetailModal.style.display = 'none';
            }
            if (e.target === deleteModal) {
                deleteModal.style.display = 'none';
            }
        });

        // Image Preview
        productImageInput.addEventListener('change', function() {
            if (this.files && this.files[0]) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    imagePreview.src = e.target.result;
                };
                reader.readAsDataURL(this.files[0]);
            }
        });

        // Save Product
        saveProductBtn.addEventListener('click', function() {
            if (validateProductForm()) {
                productForm.submit();
            }
        });

        // Form Validation
        function validateProductForm() {
            let isValid = true;

            if (!productNameInput.value.trim()) {
                productNameInput.classList.add('is-invalid');
                isValid = false;
            } else {
                productNameInput.classList.remove('is-invalid');
            }

            if (!categoryIdInput.value) {
                categoryIdInput.classList.add('is-invalid');
                isValid = false;
            } else {
                categoryIdInput.classList.remove('is-invalid');
            }

            if (!productPriceInput.value || productPriceInput.value < 0) {
                productPriceInput.classList.add('is-invalid');
                isValid = false;
            } else {
                productPriceInput.classList.remove('is-invalid');
            }

            if (!productStockInput.value || productStockInput.value < 0) {
                productStockInput.classList.add('is-invalid');
                isValid = false;
            } else {
                productStockInput.classList.remove('is-invalid');
            }

            return isValid;
        }

        // Reset Form
        function resetProductForm() {
            productIdInput.value = '0';
            productNameInput.value = '';
            categoryIdInput.value = '';
            productPriceInput.value = '';
            productStockInput.value = '';
            productDescriptionInput.value = '';
            imagePreview.src = '/Content/Images/product-placeholder.jpg';
            productNameInput.classList.remove('is-invalid');
            categoryIdInput.classList.remove('is-invalid');
            productPriceInput.classList.remove('is-invalid');
            productStockInput.classList.remove('is-invalid');
        }

        // Load Product Details
        function loadProductDetails(productId) {
            // In a real application, you would fetch the product details from the server
            // For this example, we'll simulate it with data from the DOM

            let productCard;
            productCards.forEach(card => {
                if (card.querySelector('.btn-action.view').getAttribute('data-product-id') === productId) {
                    productCard = card;
                }
            });

            if (productCard) {
                const productName = productCard.querySelector('.product-name').textContent;
                const productCategory = productCard.querySelector('.product-category').textContent.replace('i class="fas fa-tag"', '').trim();
                const productPrice = productCard.querySelector('.product-price').textContent;
                const productStatus = productCard.querySelector('.product-status').textContent;
                const productImage = productCard.querySelector('.product-image')?.src || '/Content/Images/product-placeholder.jpg';

                // Set values in the detail modal
                document.getElementById('detailProductName').textContent = productName;
                document.getElementById('detailProductCategory').textContent = productCategory;
                document.getElementById('detailProductPrice').textContent = productPrice;
                document.getElementById('detailProductStock').textContent = '10'; // Placeholder
                document.getElementById('detailProductStatus').textContent = productStatus;
                document.getElementById('detailProductDescription').textContent = 'Mô tả sản phẩm sẽ hiển thị ở đây.'; // Placeholder
                document.getElementById('detailProductImage').src = productImage;

                // Set product ID for the edit button
                detailEditBtn.setAttribute('data-product-id', productId);
            }
        }

        // Load Product for Edit
        function loadProductForEdit(productId) {
            // In a real application, you would fetch the product details from the server
            // For this example, we'll simulate it with data from the DOM

            let productCard;
            productCards.forEach(card => {
                if (card.querySelector('.btn-action.edit').getAttribute('data-product-id') === productId) {
                    productCard = card;
                }
            });

            if (productCard) {
                const productName = productCard.querySelector('.product-name').textContent;
                const categoryId = productCard.getAttribute('data-category');
                const productPrice = productCard.querySelector('.product-price').textContent.replace('VNĐ', '').trim().replace(/\./g, '');
                const productImage = productCard.querySelector('.product-image')?.src || '/Content/Images/product-placeholder.jpg';

                // Set form values
                productIdInput.value = productId;
                productNameInput.value = productName;
                categoryIdInput.value = categoryId;
                productPriceInput.value = productPrice;
                productStockInput.value = '10'; // Placeholder
                productDescriptionInput.value = 'Mô tả sản phẩm sẽ hiển thị ở đây.'; // Placeholder
                imagePreview.src = productImage;

                // Update form title and action
                productFormTitle.textContent = 'Chỉnh sửa sản phẩm';
                productForm.action = '/Order/EditProduct/' + productId;
            }
        }

        // Format Currency
        function formatCurrency(value) {
            return new Intl.NumberFormat('vi-VN').format(value);
        }
    });
</script>